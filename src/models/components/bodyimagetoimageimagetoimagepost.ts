/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type Image = {
    fileName: string;
    content: Uint8Array | string;
};

export type BodyImageToImageImageToImagePost = {
    /**
     * Uploaded image to modify with the pipeline.
     */
    image: Image | Blob;
    /**
     * Text prompt(s) to guide image generation.
     */
    prompt: string;
    /**
     * Encourages model to generate images closely linked to the text prompt (higher values may reduce image quality).
     */
    guidanceScale?: number | undefined;
    /**
     * Degree to which the generated image is pushed towards the initial image.
     */
    imageGuidanceScale?: number | undefined;
    /**
     * Hugging Face model ID used for image generation.
     */
    modelId?: string | undefined;
    /**
     * Text prompt(s) to guide what to exclude from image generation. Ignored if guidance_scale < 1.
     */
    negativePrompt?: string | undefined;
    /**
     * Number of images to generate per prompt.
     */
    numImagesPerPrompt?: number | undefined;
    /**
     * Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
     */
    numInferenceSteps?: number | undefined;
    /**
     * Perform a safety check to estimate if generated images could be offensive or harmful.
     */
    safetyCheck?: boolean | undefined;
    /**
     * Seed for random number generation.
     */
    seed?: number | undefined;
    /**
     * Degree of transformation applied to the reference image (0 to 1).
     */
    strength?: number | undefined;
};

/** @internal */
export const Image$inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown> = z.object({
    fileName: z.string(),
    content: b64$.zodInbound,
});

/** @internal */
export type Image$Outbound = {
    fileName: string;
    content: Uint8Array;
};

/** @internal */
export const Image$outboundSchema: z.ZodType<Image$Outbound, z.ZodTypeDef, Image> = z.object({
    fileName: z.string(),
    content: b64$.zodOutbound,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Image$ {
    /** @deprecated use `Image$inboundSchema` instead. */
    export const inboundSchema = Image$inboundSchema;
    /** @deprecated use `Image$outboundSchema` instead. */
    export const outboundSchema = Image$outboundSchema;
    /** @deprecated use `Image$Outbound` instead. */
    export type Outbound = Image$Outbound;
}

/** @internal */
export const BodyImageToImageImageToImagePost$inboundSchema: z.ZodType<
    BodyImageToImageImageToImagePost,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        image: z.lazy(() => Image$inboundSchema),
        prompt: z.string(),
        guidance_scale: z.number().default(7.5),
        image_guidance_scale: z.number().default(1.5),
        model_id: z.string().default(""),
        negative_prompt: z.string().default(""),
        num_images_per_prompt: z.number().int().default(1),
        num_inference_steps: z.number().int().default(100),
        safety_check: z.boolean().default(true),
        seed: z.number().int().optional(),
        strength: z.number().default(0.8),
    })
    .transform((v) => {
        return remap$(v, {
            guidance_scale: "guidanceScale",
            image_guidance_scale: "imageGuidanceScale",
            model_id: "modelId",
            negative_prompt: "negativePrompt",
            num_images_per_prompt: "numImagesPerPrompt",
            num_inference_steps: "numInferenceSteps",
            safety_check: "safetyCheck",
        });
    });

/** @internal */
export type BodyImageToImageImageToImagePost$Outbound = {
    image: Image$Outbound | Blob;
    prompt: string;
    guidance_scale: number;
    image_guidance_scale: number;
    model_id: string;
    negative_prompt: string;
    num_images_per_prompt: number;
    num_inference_steps: number;
    safety_check: boolean;
    seed?: number | undefined;
    strength: number;
};

/** @internal */
export const BodyImageToImageImageToImagePost$outboundSchema: z.ZodType<
    BodyImageToImageImageToImagePost$Outbound,
    z.ZodTypeDef,
    BodyImageToImageImageToImagePost
> = z
    .object({
        image: z.lazy(() => Image$outboundSchema).or(blobLikeSchema),
        prompt: z.string(),
        guidanceScale: z.number().default(7.5),
        imageGuidanceScale: z.number().default(1.5),
        modelId: z.string().default(""),
        negativePrompt: z.string().default(""),
        numImagesPerPrompt: z.number().int().default(1),
        numInferenceSteps: z.number().int().default(100),
        safetyCheck: z.boolean().default(true),
        seed: z.number().int().optional(),
        strength: z.number().default(0.8),
    })
    .transform((v) => {
        return remap$(v, {
            guidanceScale: "guidance_scale",
            imageGuidanceScale: "image_guidance_scale",
            modelId: "model_id",
            negativePrompt: "negative_prompt",
            numImagesPerPrompt: "num_images_per_prompt",
            numInferenceSteps: "num_inference_steps",
            safetyCheck: "safety_check",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyImageToImageImageToImagePost$ {
    /** @deprecated use `BodyImageToImageImageToImagePost$inboundSchema` instead. */
    export const inboundSchema = BodyImageToImageImageToImagePost$inboundSchema;
    /** @deprecated use `BodyImageToImageImageToImagePost$outboundSchema` instead. */
    export const outboundSchema = BodyImageToImageImageToImagePost$outboundSchema;
    /** @deprecated use `BodyImageToImageImageToImagePost$Outbound` instead. */
    export type Outbound = BodyImageToImageImageToImagePost$Outbound;
}
