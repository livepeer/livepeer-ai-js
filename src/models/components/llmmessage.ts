/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LLMMessage = {
  role: string;
  content: string;
};

/** @internal */
export const LLMMessage$inboundSchema: z.ZodType<
  LLMMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string(),
  content: z.string(),
});

/** @internal */
export type LLMMessage$Outbound = {
  role: string;
  content: string;
};

/** @internal */
export const LLMMessage$outboundSchema: z.ZodType<
  LLMMessage$Outbound,
  z.ZodTypeDef,
  LLMMessage
> = z.object({
  role: z.string(),
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LLMMessage$ {
  /** @deprecated use `LLMMessage$inboundSchema` instead. */
  export const inboundSchema = LLMMessage$inboundSchema;
  /** @deprecated use `LLMMessage$outboundSchema` instead. */
  export const outboundSchema = LLMMessage$outboundSchema;
  /** @deprecated use `LLMMessage$Outbound` instead. */
  export type Outbound = LLMMessage$Outbound;
}

export function llmMessageToJSON(llmMessage: LLMMessage): string {
  return JSON.stringify(LLMMessage$outboundSchema.parse(llmMessage));
}

export function llmMessageFromJSON(
  jsonString: string,
): SafeParseResult<LLMMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LLMMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LLMMessage' from JSON`,
  );
}
