/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type BodyImageToVideoImageToVideoPostImage = {
    fileName: string;
    content: Uint8Array | string;
};

export type BodyImageToVideoImageToVideoPost = {
    /**
     * Uploaded image to generate a video from.
     */
    image: BodyImageToVideoImageToVideoPostImage | Blob;
    /**
     * The frames per second of the generated video.
     */
    fps?: number | undefined;
    /**
     * The height in pixels of the generated video.
     */
    height?: number | undefined;
    /**
     * Hugging Face model ID used for video generation.
     */
    modelId?: string | undefined;
    /**
     * Used for conditioning the amount of motion for the generation. The higher the number the more motion will be in the video.
     */
    motionBucketId?: number | undefined;
    /**
     * Amount of noise added to the conditioning image. Higher values reduce resemblance to the conditioning image and increase motion.
     */
    noiseAugStrength?: number | undefined;
    /**
     * Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
     */
    numInferenceSteps?: number | undefined;
    /**
     * Perform a safety check to estimate if generated images could be offensive or harmful.
     */
    safetyCheck?: boolean | undefined;
    /**
     * Seed for random number generation.
     */
    seed?: number | undefined;
    /**
     * The width in pixels of the generated video.
     */
    width?: number | undefined;
};

/** @internal */
export const BodyImageToVideoImageToVideoPostImage$inboundSchema: z.ZodType<
    BodyImageToVideoImageToVideoPostImage,
    z.ZodTypeDef,
    unknown
> = z.object({
    fileName: z.string(),
    content: b64$.zodInbound,
});

/** @internal */
export type BodyImageToVideoImageToVideoPostImage$Outbound = {
    fileName: string;
    content: Uint8Array;
};

/** @internal */
export const BodyImageToVideoImageToVideoPostImage$outboundSchema: z.ZodType<
    BodyImageToVideoImageToVideoPostImage$Outbound,
    z.ZodTypeDef,
    BodyImageToVideoImageToVideoPostImage
> = z.object({
    fileName: z.string(),
    content: b64$.zodOutbound,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyImageToVideoImageToVideoPostImage$ {
    /** @deprecated use `BodyImageToVideoImageToVideoPostImage$inboundSchema` instead. */
    export const inboundSchema = BodyImageToVideoImageToVideoPostImage$inboundSchema;
    /** @deprecated use `BodyImageToVideoImageToVideoPostImage$outboundSchema` instead. */
    export const outboundSchema = BodyImageToVideoImageToVideoPostImage$outboundSchema;
    /** @deprecated use `BodyImageToVideoImageToVideoPostImage$Outbound` instead. */
    export type Outbound = BodyImageToVideoImageToVideoPostImage$Outbound;
}

/** @internal */
export const BodyImageToVideoImageToVideoPost$inboundSchema: z.ZodType<
    BodyImageToVideoImageToVideoPost,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        image: z.lazy(() => BodyImageToVideoImageToVideoPostImage$inboundSchema),
        fps: z.number().int().default(6),
        height: z.number().int().default(576),
        model_id: z.string().default(""),
        motion_bucket_id: z.number().int().default(127),
        noise_aug_strength: z.number().default(0.02),
        num_inference_steps: z.number().int().default(25),
        safety_check: z.boolean().default(true),
        seed: z.number().int().optional(),
        width: z.number().int().default(1024),
    })
    .transform((v) => {
        return remap$(v, {
            model_id: "modelId",
            motion_bucket_id: "motionBucketId",
            noise_aug_strength: "noiseAugStrength",
            num_inference_steps: "numInferenceSteps",
            safety_check: "safetyCheck",
        });
    });

/** @internal */
export type BodyImageToVideoImageToVideoPost$Outbound = {
    image: BodyImageToVideoImageToVideoPostImage$Outbound | Blob;
    fps: number;
    height: number;
    model_id: string;
    motion_bucket_id: number;
    noise_aug_strength: number;
    num_inference_steps: number;
    safety_check: boolean;
    seed?: number | undefined;
    width: number;
};

/** @internal */
export const BodyImageToVideoImageToVideoPost$outboundSchema: z.ZodType<
    BodyImageToVideoImageToVideoPost$Outbound,
    z.ZodTypeDef,
    BodyImageToVideoImageToVideoPost
> = z
    .object({
        image: z
            .lazy(() => BodyImageToVideoImageToVideoPostImage$outboundSchema)
            .or(blobLikeSchema),
        fps: z.number().int().default(6),
        height: z.number().int().default(576),
        modelId: z.string().default(""),
        motionBucketId: z.number().int().default(127),
        noiseAugStrength: z.number().default(0.02),
        numInferenceSteps: z.number().int().default(25),
        safetyCheck: z.boolean().default(true),
        seed: z.number().int().optional(),
        width: z.number().int().default(1024),
    })
    .transform((v) => {
        return remap$(v, {
            modelId: "model_id",
            motionBucketId: "motion_bucket_id",
            noiseAugStrength: "noise_aug_strength",
            numInferenceSteps: "num_inference_steps",
            safetyCheck: "safety_check",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyImageToVideoImageToVideoPost$ {
    /** @deprecated use `BodyImageToVideoImageToVideoPost$inboundSchema` instead. */
    export const inboundSchema = BodyImageToVideoImageToVideoPost$inboundSchema;
    /** @deprecated use `BodyImageToVideoImageToVideoPost$outboundSchema` instead. */
    export const outboundSchema = BodyImageToVideoImageToVideoPost$outboundSchema;
    /** @deprecated use `BodyImageToVideoImageToVideoPost$Outbound` instead. */
    export type Outbound = BodyImageToVideoImageToVideoPost$Outbound;
}
