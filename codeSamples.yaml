overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/audio-to-text"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genAudioToText
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.audioToText({
                audio: await openAsBlob("example.file"),
                modelId: "",
                returnTimestamps: "true",
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/image-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genImageToImage
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.imageToImage({
                prompt: "<value>",
                image: await openAsBlob("example.file"),
                modelId: "",
                loras: "",
                strength: 0.8,
                guidanceScale: 7.5,
                imageGuidanceScale: 1.5,
                negativePrompt: "",
                safetyCheck: true,
                numInferenceSteps: 100,
                numImagesPerPrompt: 1,
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/image-to-text"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genImageToText
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.imageToText({
                image: await openAsBlob("example.file"),
                prompt: "",
                modelId: "",
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/image-to-video"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genImageToVideo
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.imageToVideo({
                image: await openAsBlob("example.file"),
                modelId: "",
                height: 576,
                width: 1024,
                fps: 6,
                motionBucketId: 127,
                noiseAugStrength: 0.02,
                safetyCheck: true,
                numInferenceSteps: 25,
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/live-video-to-video"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genLiveVideoToVideo
          source: |-
            import { Livepeer } from "@livepeer/ai";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.liveVideoToVideo({
                subscribeUrl: "https://soulful-lava.org/",
                publishUrl: "https://vain-tabletop.biz",
                controlUrl: "",
                eventsUrl: "",
                modelId: "",
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/llm"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genLLM
          source: |-
            import { Livepeer } from "@livepeer/ai";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.llm({
                messages: [

                ],
                model: "",
                temperature: 0.7,
                maxTokens: 256,
                topP: 1,
                topK: -1,
                stream: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/segment-anything-2"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genSegmentAnything2
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.segmentAnything2({
                image: await openAsBlob("example.file"),
                modelId: "",
                multimaskOutput: true,
                returnLogits: true,
                normalizeCoords: true,
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/text-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genTextToImage
          source: |-
            import { Livepeer } from "@livepeer/ai";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.textToImage({
                modelId: "",
                loras: "",
                prompt: "<value>",
                height: 576,
                width: 1024,
                guidanceScale: 7.5,
                negativePrompt: "",
                safetyCheck: true,
                numInferenceSteps: 50,
                numImagesPerPrompt: 1,
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/text-to-speech"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genTextToSpeech
          source: |-
            import { Livepeer } from "@livepeer/ai";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.textToSpeech({
                modelId: "",
                text: "",
                description: "A male speaker delivers a slightly expressive and animated speech with a moderate speed and pitch.",
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/upscale"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genUpscale
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.upscale({
                prompt: "<value>",
                image: await openAsBlob("example.file"),
                modelId: "",
                safetyCheck: true,
                numInferenceSteps: 75,
              });

              // Handle the result
              console.log(result);
            }

            run();
