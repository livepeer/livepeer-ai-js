/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";

export type BodySegmentAnything2SegmentAnything2PostImage = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Buffer;
};

export type BodySegmentAnything2SegmentAnything2Post = {
  /**
   * Image to segment.
   */
  image: BodySegmentAnything2SegmentAnything2PostImage | Blob;
  /**
   * A length 4 array given as a box prompt to the model, in XYXY format.
   */
  box?: string | undefined;
  /**
   * A low-resolution mask input to the model, typically from a previous prediction iteration, with the form 1xHxW (H=W=256 for SAM).
   */
  maskInput?: string | undefined;
  /**
   * Hugging Face model ID used for image generation.
   */
  modelId?: string | undefined;
  /**
   * If true, the model will return three masks for ambiguous input prompts, often producing better masks than a single prediction.
   */
  multimaskOutput?: boolean | undefined;
  /**
   * If true, the point coordinates will be normalized to the range [0,1], with point_coords expected to be with respect to image dimensions.
   */
  normalizeCoords?: boolean | undefined;
  /**
   * Nx2 array of point prompts to the model, where each point is in (X,Y) in pixels.
   */
  pointCoords?: string | undefined;
  /**
   * Labels for the point prompts, where 1 indicates a foreground point and 0 indicates a background point.
   */
  pointLabels?: string | undefined;
  /**
   * If true, returns un-thresholded mask logits instead of a binary mask.
   */
  returnLogits?: boolean | undefined;
};

/** @internal */
export const BodySegmentAnything2SegmentAnything2PostImage$inboundSchema:
  z.ZodType<
    BodySegmentAnything2SegmentAnything2PostImage,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Buffer),
    ]),
  });

/** @internal */
export type BodySegmentAnything2SegmentAnything2PostImage$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Buffer;
};

/** @internal */
export const BodySegmentAnything2SegmentAnything2PostImage$outboundSchema:
  z.ZodType<
    BodySegmentAnything2SegmentAnything2PostImage$Outbound,
    z.ZodTypeDef,
    BodySegmentAnything2SegmentAnything2PostImage
  > = z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Buffer),
    ]),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodySegmentAnything2SegmentAnything2PostImage$ {
  /** @deprecated use `BodySegmentAnything2SegmentAnything2PostImage$inboundSchema` instead. */
  export const inboundSchema =
    BodySegmentAnything2SegmentAnything2PostImage$inboundSchema;
  /** @deprecated use `BodySegmentAnything2SegmentAnything2PostImage$outboundSchema` instead. */
  export const outboundSchema =
    BodySegmentAnything2SegmentAnything2PostImage$outboundSchema;
  /** @deprecated use `BodySegmentAnything2SegmentAnything2PostImage$Outbound` instead. */
  export type Outbound = BodySegmentAnything2SegmentAnything2PostImage$Outbound;
}

/** @internal */
export const BodySegmentAnything2SegmentAnything2Post$inboundSchema: z.ZodType<
  BodySegmentAnything2SegmentAnything2Post,
  z.ZodTypeDef,
  unknown
> = z.object({
  image: z.lazy(() =>
    BodySegmentAnything2SegmentAnything2PostImage$inboundSchema
  ),
  box: z.string().optional(),
  mask_input: z.string().optional(),
  model_id: z.string().default(""),
  multimask_output: z.boolean().default(true),
  normalize_coords: z.boolean().default(true),
  point_coords: z.string().optional(),
  point_labels: z.string().optional(),
  return_logits: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "mask_input": "maskInput",
    "model_id": "modelId",
    "multimask_output": "multimaskOutput",
    "normalize_coords": "normalizeCoords",
    "point_coords": "pointCoords",
    "point_labels": "pointLabels",
    "return_logits": "returnLogits",
  });
});

/** @internal */
export type BodySegmentAnything2SegmentAnything2Post$Outbound = {
  image: BodySegmentAnything2SegmentAnything2PostImage$Outbound | Blob;
  box?: string | undefined;
  mask_input?: string | undefined;
  model_id: string;
  multimask_output: boolean;
  normalize_coords: boolean;
  point_coords?: string | undefined;
  point_labels?: string | undefined;
  return_logits: boolean;
};

/** @internal */
export const BodySegmentAnything2SegmentAnything2Post$outboundSchema: z.ZodType<
  BodySegmentAnything2SegmentAnything2Post$Outbound,
  z.ZodTypeDef,
  BodySegmentAnything2SegmentAnything2Post
> = z.object({
  image: z.lazy(() =>
    BodySegmentAnything2SegmentAnything2PostImage$outboundSchema
  ).or(blobLikeSchema),
  box: z.string().optional(),
  maskInput: z.string().optional(),
  modelId: z.string().default(""),
  multimaskOutput: z.boolean().default(true),
  normalizeCoords: z.boolean().default(true),
  pointCoords: z.string().optional(),
  pointLabels: z.string().optional(),
  returnLogits: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    maskInput: "mask_input",
    modelId: "model_id",
    multimaskOutput: "multimask_output",
    normalizeCoords: "normalize_coords",
    pointCoords: "point_coords",
    pointLabels: "point_labels",
    returnLogits: "return_logits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodySegmentAnything2SegmentAnything2Post$ {
  /** @deprecated use `BodySegmentAnything2SegmentAnything2Post$inboundSchema` instead. */
  export const inboundSchema =
    BodySegmentAnything2SegmentAnything2Post$inboundSchema;
  /** @deprecated use `BodySegmentAnything2SegmentAnything2Post$outboundSchema` instead. */
  export const outboundSchema =
    BodySegmentAnything2SegmentAnything2Post$outboundSchema;
  /** @deprecated use `BodySegmentAnything2SegmentAnything2Post$Outbound` instead. */
  export type Outbound = BodySegmentAnything2SegmentAnything2Post$Outbound;
}
