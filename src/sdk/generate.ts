/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { generateAudioToText } from "../funcs/generateAudioToText.js";
import { generateImageToImage } from "../funcs/generateImageToImage.js";
import { generateImageToText } from "../funcs/generateImageToText.js";
import { generateImageToVideo } from "../funcs/generateImageToVideo.js";
import { generateLiveVideoToVideo } from "../funcs/generateLiveVideoToVideo.js";
import { generateLlm } from "../funcs/generateLlm.js";
import { generateSegmentAnything2 } from "../funcs/generateSegmentAnything2.js";
import { generateTextToImage } from "../funcs/generateTextToImage.js";
import { generateTextToSpeech } from "../funcs/generateTextToSpeech.js";
import { generateUpscale } from "../funcs/generateUpscale.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Generate extends ClientSDK {
  /**
   * Text To Image
   *
   * @remarks
   * Generate images from text prompts.
   */
  async textToImage(
    request: components.TextToImageParams,
    options?: RequestOptions,
  ): Promise<operations.GenTextToImageResponse> {
    return unwrapAsync(generateTextToImage(
      this,
      request,
      options,
    ));
  }

  /**
   * Image To Image
   *
   * @remarks
   * Apply image transformations to a provided image.
   */
  async imageToImage(
    request: components.BodyGenImageToImage,
    options?: RequestOptions,
  ): Promise<operations.GenImageToImageResponse> {
    return unwrapAsync(generateImageToImage(
      this,
      request,
      options,
    ));
  }

  /**
   * Image To Video
   *
   * @remarks
   * Generate a video from a provided image.
   */
  async imageToVideo(
    request: components.BodyGenImageToVideo,
    options?: RequestOptions,
  ): Promise<operations.GenImageToVideoResponse> {
    return unwrapAsync(generateImageToVideo(
      this,
      request,
      options,
    ));
  }

  /**
   * Upscale
   *
   * @remarks
   * Upscale an image by increasing its resolution.
   */
  async upscale(
    request: components.BodyGenUpscale,
    options?: RequestOptions,
  ): Promise<operations.GenUpscaleResponse> {
    return unwrapAsync(generateUpscale(
      this,
      request,
      options,
    ));
  }

  /**
   * Audio To Text
   *
   * @remarks
   * Transcribe audio files to text.
   */
  async audioToText(
    request: components.BodyGenAudioToText,
    options?: RequestOptions,
  ): Promise<operations.GenAudioToTextResponse> {
    return unwrapAsync(generateAudioToText(
      this,
      request,
      options,
    ));
  }

  /**
   * Segment Anything 2
   *
   * @remarks
   * Segment objects in an image.
   */
  async segmentAnything2(
    request: components.BodyGenSegmentAnything2,
    options?: RequestOptions,
  ): Promise<operations.GenSegmentAnything2Response> {
    return unwrapAsync(generateSegmentAnything2(
      this,
      request,
      options,
    ));
  }

  /**
   * LLM
   *
   * @remarks
   * Generate text using a language model.
   */
  async llm(
    request: components.LLMRequest,
    options?: RequestOptions,
  ): Promise<operations.GenLLMResponse> {
    return unwrapAsync(generateLlm(
      this,
      request,
      options,
    ));
  }

  /**
   * Image To Text
   *
   * @remarks
   * Transform image files to text.
   */
  async imageToText(
    request: components.BodyGenImageToText,
    options?: RequestOptions,
  ): Promise<operations.GenImageToTextResponse> {
    return unwrapAsync(generateImageToText(
      this,
      request,
      options,
    ));
  }

  /**
   * Live Video To Video
   *
   * @remarks
   * Apply transformations to a live video streamed to the returned endpoints.
   */
  async liveVideoToVideo(
    request: components.LiveVideoToVideoParams,
    options?: RequestOptions,
  ): Promise<operations.GenLiveVideoToVideoResponse> {
    return unwrapAsync(generateLiveVideoToVideo(
      this,
      request,
      options,
    ));
  }

  /**
   * Text To Speech
   *
   * @remarks
   * Generate a text-to-speech audio file based on the provided text input and speaker description.
   */
  async textToSpeech(
    request: components.TextToSpeechParams,
    options?: RequestOptions,
  ): Promise<operations.GenTextToSpeechResponse> {
    return unwrapAsync(generateTextToSpeech(
      this,
      request,
      options,
    ));
  }
}
