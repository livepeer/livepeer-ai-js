/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LLMMessage,
  LLMMessage$inboundSchema,
  LLMMessage$Outbound,
  LLMMessage$outboundSchema,
} from "./llmmessage.js";

export type LLMChoice = {
  index: number;
  finishReason?: string | undefined;
  delta?: LLMMessage | undefined;
  message?: LLMMessage | undefined;
};

/** @internal */
export const LLMChoice$inboundSchema: z.ZodType<
  LLMChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number().int(),
  finish_reason: z.string().default(""),
  delta: LLMMessage$inboundSchema.optional(),
  message: LLMMessage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type LLMChoice$Outbound = {
  index: number;
  finish_reason: string;
  delta?: LLMMessage$Outbound | undefined;
  message?: LLMMessage$Outbound | undefined;
};

/** @internal */
export const LLMChoice$outboundSchema: z.ZodType<
  LLMChoice$Outbound,
  z.ZodTypeDef,
  LLMChoice
> = z.object({
  index: z.number().int(),
  finishReason: z.string().default(""),
  delta: LLMMessage$outboundSchema.optional(),
  message: LLMMessage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LLMChoice$ {
  /** @deprecated use `LLMChoice$inboundSchema` instead. */
  export const inboundSchema = LLMChoice$inboundSchema;
  /** @deprecated use `LLMChoice$outboundSchema` instead. */
  export const outboundSchema = LLMChoice$outboundSchema;
  /** @deprecated use `LLMChoice$Outbound` instead. */
  export type Outbound = LLMChoice$Outbound;
}

export function llmChoiceToJSON(llmChoice: LLMChoice): string {
  return JSON.stringify(LLMChoice$outboundSchema.parse(llmChoice));
}

export function llmChoiceFromJSON(
  jsonString: string,
): SafeParseResult<LLMChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LLMChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LLMChoice' from JSON`,
  );
}
