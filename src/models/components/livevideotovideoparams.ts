/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * Initial parameters for the model.
 */
export type Params = {};

export type LiveVideoToVideoParams = {
  /**
   * Source URL of the incoming stream to subscribe to.
   */
  subscribeUrl: string;
  /**
   * Destination URL of the outgoing stream to publish.
   */
  publishUrl: string;
  /**
   * Hugging Face model ID used for image generation.
   */
  modelId?: string | undefined;
  /**
   * Initial parameters for the model.
   */
  params?: Params | undefined;
};

/** @internal */
export const Params$inboundSchema: z.ZodType<Params, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Params$Outbound = {};

/** @internal */
export const Params$outboundSchema: z.ZodType<
  Params$Outbound,
  z.ZodTypeDef,
  Params
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Params$ {
  /** @deprecated use `Params$inboundSchema` instead. */
  export const inboundSchema = Params$inboundSchema;
  /** @deprecated use `Params$outboundSchema` instead. */
  export const outboundSchema = Params$outboundSchema;
  /** @deprecated use `Params$Outbound` instead. */
  export type Outbound = Params$Outbound;
}

/** @internal */
export const LiveVideoToVideoParams$inboundSchema: z.ZodType<
  LiveVideoToVideoParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscribe_url: z.string(),
  publish_url: z.string(),
  model_id: z.string().default(""),
  params: z.lazy(() => Params$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "subscribe_url": "subscribeUrl",
    "publish_url": "publishUrl",
    "model_id": "modelId",
  });
});

/** @internal */
export type LiveVideoToVideoParams$Outbound = {
  subscribe_url: string;
  publish_url: string;
  model_id: string;
  params?: Params$Outbound | undefined;
};

/** @internal */
export const LiveVideoToVideoParams$outboundSchema: z.ZodType<
  LiveVideoToVideoParams$Outbound,
  z.ZodTypeDef,
  LiveVideoToVideoParams
> = z.object({
  subscribeUrl: z.string(),
  publishUrl: z.string(),
  modelId: z.string().default(""),
  params: z.lazy(() => Params$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    subscribeUrl: "subscribe_url",
    publishUrl: "publish_url",
    modelId: "model_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LiveVideoToVideoParams$ {
  /** @deprecated use `LiveVideoToVideoParams$inboundSchema` instead. */
  export const inboundSchema = LiveVideoToVideoParams$inboundSchema;
  /** @deprecated use `LiveVideoToVideoParams$outboundSchema` instead. */
  export const outboundSchema = LiveVideoToVideoParams$outboundSchema;
  /** @deprecated use `LiveVideoToVideoParams$Outbound` instead. */
  export type Outbound = LiveVideoToVideoParams$Outbound;
}
