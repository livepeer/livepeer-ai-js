overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/audio-to-text"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genAudioToText
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.audioToText({
                audio: await openAsBlob("example.file"),
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/image-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genImageToImage
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.imageToImage({
                prompt: "<value>",
                image: await openAsBlob("example.file"),
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/image-to-video"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genImageToVideo
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.imageToVideo({
                image: await openAsBlob("example.file"),
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/llm"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genLLM
          source: |-
            import { Livepeer } from "@livepeer/ai";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.llm({
                prompt: "<value>",
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/segment-anything-2"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genSegmentAnything2
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.segmentAnything2({
                image: await openAsBlob("example.file"),
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/text-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genTextToImage
          source: |-
            import { Livepeer } from "@livepeer/ai";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.textToImage({
                prompt: "<value>",
              });

              // Handle the result
              console.log(result);
            }

            run();
  - target: $["paths"]["/upscale"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: genUpscale
          source: |-
            import { Livepeer } from "@livepeer/ai";
            import { openAsBlob } from "node:fs";

            const livepeer = new Livepeer({
              httpBearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.generate.upscale({
                prompt: "<value>",
                image: await openAsBlob("example.file"),
              });

              // Handle the result
              console.log(result);
            }

            run();
