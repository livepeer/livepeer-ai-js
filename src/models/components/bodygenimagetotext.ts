/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";

export type BodyGenImageToTextImage = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type BodyGenImageToText = {
  /**
   * Uploaded image to transform with the pipeline.
   */
  image: BodyGenImageToTextImage | Blob;
  /**
   * Hugging Face model ID used for transformation.
   */
  modelId?: string | undefined;
  /**
   * Text prompt(s) to guide transformation.
   */
  prompt?: string | undefined;
};

/** @internal */
export const BodyGenImageToTextImage$inboundSchema: z.ZodType<
  BodyGenImageToTextImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type BodyGenImageToTextImage$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const BodyGenImageToTextImage$outboundSchema: z.ZodType<
  BodyGenImageToTextImage$Outbound,
  z.ZodTypeDef,
  BodyGenImageToTextImage
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyGenImageToTextImage$ {
  /** @deprecated use `BodyGenImageToTextImage$inboundSchema` instead. */
  export const inboundSchema = BodyGenImageToTextImage$inboundSchema;
  /** @deprecated use `BodyGenImageToTextImage$outboundSchema` instead. */
  export const outboundSchema = BodyGenImageToTextImage$outboundSchema;
  /** @deprecated use `BodyGenImageToTextImage$Outbound` instead. */
  export type Outbound = BodyGenImageToTextImage$Outbound;
}

/** @internal */
export const BodyGenImageToText$inboundSchema: z.ZodType<
  BodyGenImageToText,
  z.ZodTypeDef,
  unknown
> = z.object({
  image: z.lazy(() => BodyGenImageToTextImage$inboundSchema),
  model_id: z.string().default(""),
  prompt: z.string().default(""),
}).transform((v) => {
  return remap$(v, {
    "model_id": "modelId",
  });
});

/** @internal */
export type BodyGenImageToText$Outbound = {
  image: BodyGenImageToTextImage$Outbound | Blob;
  model_id: string;
  prompt: string;
};

/** @internal */
export const BodyGenImageToText$outboundSchema: z.ZodType<
  BodyGenImageToText$Outbound,
  z.ZodTypeDef,
  BodyGenImageToText
> = z.object({
  image: z.lazy(() => BodyGenImageToTextImage$outboundSchema).or(
    blobLikeSchema,
  ),
  modelId: z.string().default(""),
  prompt: z.string().default(""),
}).transform((v) => {
  return remap$(v, {
    modelId: "model_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyGenImageToText$ {
  /** @deprecated use `BodyGenImageToText$inboundSchema` instead. */
  export const inboundSchema = BodyGenImageToText$inboundSchema;
  /** @deprecated use `BodyGenImageToText$outboundSchema` instead. */
  export const outboundSchema = BodyGenImageToText$outboundSchema;
  /** @deprecated use `BodyGenImageToText$Outbound` instead. */
  export type Outbound = BodyGenImageToText$Outbound;
}
