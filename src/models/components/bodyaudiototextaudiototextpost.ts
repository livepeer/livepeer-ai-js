/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type Audio = {
    fileName: string;
    content: Uint8Array | string;
};

export type BodyAudioToTextAudioToTextPost = {
    /**
     * Uploaded audio file to be transcribed.
     */
    audio: Audio | Blob;
    /**
     * Hugging Face model ID used for transcription.
     */
    modelId?: string | undefined;
};

/** @internal */
export const Audio$inboundSchema: z.ZodType<Audio, z.ZodTypeDef, unknown> = z.object({
    fileName: z.string(),
    content: b64$.zodInbound,
});

/** @internal */
export type Audio$Outbound = {
    fileName: string;
    content: Uint8Array;
};

/** @internal */
export const Audio$outboundSchema: z.ZodType<Audio$Outbound, z.ZodTypeDef, Audio> = z.object({
    fileName: z.string(),
    content: b64$.zodOutbound,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Audio$ {
    /** @deprecated use `Audio$inboundSchema` instead. */
    export const inboundSchema = Audio$inboundSchema;
    /** @deprecated use `Audio$outboundSchema` instead. */
    export const outboundSchema = Audio$outboundSchema;
    /** @deprecated use `Audio$Outbound` instead. */
    export type Outbound = Audio$Outbound;
}

/** @internal */
export const BodyAudioToTextAudioToTextPost$inboundSchema: z.ZodType<
    BodyAudioToTextAudioToTextPost,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        audio: z.lazy(() => Audio$inboundSchema),
        model_id: z.string().default(""),
    })
    .transform((v) => {
        return remap$(v, {
            model_id: "modelId",
        });
    });

/** @internal */
export type BodyAudioToTextAudioToTextPost$Outbound = {
    audio: Audio$Outbound | Blob;
    model_id: string;
};

/** @internal */
export const BodyAudioToTextAudioToTextPost$outboundSchema: z.ZodType<
    BodyAudioToTextAudioToTextPost$Outbound,
    z.ZodTypeDef,
    BodyAudioToTextAudioToTextPost
> = z
    .object({
        audio: z.lazy(() => Audio$outboundSchema).or(blobLikeSchema),
        modelId: z.string().default(""),
    })
    .transform((v) => {
        return remap$(v, {
            modelId: "model_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodyAudioToTextAudioToTextPost$ {
    /** @deprecated use `BodyAudioToTextAudioToTextPost$inboundSchema` instead. */
    export const inboundSchema = BodyAudioToTextAudioToTextPost$inboundSchema;
    /** @deprecated use `BodyAudioToTextAudioToTextPost$outboundSchema` instead. */
    export const outboundSchema = BodyAudioToTextAudioToTextPost$outboundSchema;
    /** @deprecated use `BodyAudioToTextAudioToTextPost$Outbound` instead. */
    export type Outbound = BodyAudioToTextAudioToTextPost$Outbound;
}
