/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LLMChoice,
  LLMChoice$inboundSchema,
  LLMChoice$Outbound,
  LLMChoice$outboundSchema,
} from "./llmchoice.js";
import {
  LLMTokenUsage,
  LLMTokenUsage$inboundSchema,
  LLMTokenUsage$Outbound,
  LLMTokenUsage$outboundSchema,
} from "./llmtokenusage.js";

export type LLMResponse = {
  id: string;
  model: string;
  created: number;
  usage: LLMTokenUsage;
  choices: Array<LLMChoice>;
};

/** @internal */
export const LLMResponse$inboundSchema: z.ZodType<
  LLMResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  model: z.string(),
  created: z.number().int(),
  usage: LLMTokenUsage$inboundSchema,
  choices: z.array(LLMChoice$inboundSchema),
});

/** @internal */
export type LLMResponse$Outbound = {
  id: string;
  model: string;
  created: number;
  usage: LLMTokenUsage$Outbound;
  choices: Array<LLMChoice$Outbound>;
};

/** @internal */
export const LLMResponse$outboundSchema: z.ZodType<
  LLMResponse$Outbound,
  z.ZodTypeDef,
  LLMResponse
> = z.object({
  id: z.string(),
  model: z.string(),
  created: z.number().int(),
  usage: LLMTokenUsage$outboundSchema,
  choices: z.array(LLMChoice$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LLMResponse$ {
  /** @deprecated use `LLMResponse$inboundSchema` instead. */
  export const inboundSchema = LLMResponse$inboundSchema;
  /** @deprecated use `LLMResponse$outboundSchema` instead. */
  export const outboundSchema = LLMResponse$outboundSchema;
  /** @deprecated use `LLMResponse$Outbound` instead. */
  export type Outbound = LLMResponse$Outbound;
}

export function llmResponseToJSON(llmResponse: LLMResponse): string {
  return JSON.stringify(LLMResponse$outboundSchema.parse(llmResponse));
}

export function llmResponseFromJSON(
  jsonString: string,
): SafeParseResult<LLMResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LLMResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LLMResponse' from JSON`,
  );
}
